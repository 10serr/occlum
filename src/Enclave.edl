enclave {
    from "sgx_backtrace.edl" import *;
    from "sgx_stdio.edl" import *;
    from "sgx_tstdc.edl" import *;
    from "sgx_tstd.edl" import *;
    from "sgx_tprotected_fs.edl" import *;
    from "sgx_net.edl" import *;

    include "sgx_quote.h"

    trusted {
        /* define ECALLs here. */
        public int libos_boot([in, string] const char* executable_path, [user_check] const char** argv);
        public int libos_run(int host_tid);
        /* This is only for debug usage */
        public int dummy_ecall(void);
    };

    untrusted {
        void ocall_print_string([in, string] const char* msg);
        int ocall_run_new_task(void);
        void ocall_gettimeofday([out] long* sec, [out] long* us);
        void ocall_clock_gettime(int clockid, [out] long* sec, [out] long* ns);
        void ocall_nanosleep(long sec, long nsec);
        void ocall_sync(void);
        void ocall_sched_yield(void);
        int ocall_sched_getaffinity([out] int *error, int pid, size_t cpusize, [out, size=cpusize] unsigned char* buf);
        int ocall_sched_setaffinity([out] int *error, int pid, size_t cpusize, [in, size=cpusize] const unsigned char* buf);

        sgx_status_t ocall_sgx_init_quote(
            [out] sgx_target_info_t *target_info,
            [out] sgx_epid_group_id_t *epid_group_id);
        sgx_status_t ocall_sgx_get_quote(
            [in, size=sigrl_len] uint8_t* sigrl,
            uint32_t sigrl_len,
            [in] sgx_report_t* report,
            sgx_quote_sign_type_t quote_type,
            [in] sgx_spid_t* spid,
            [in] sgx_quote_nonce_t* nonce,
            [out] sgx_report_t* qe_report,
            [out, size=quote_buf_len] uint8_t* quote_buf,
            uint32_t quote_buf_len);

        int64_t ocall_sendmsg(
            int sockfd,
            [in, size=msg_namelen] const void* msg_name,
            socklen_t msg_namelen,
            [in, size=buf_len] const void* buf,
            size_t buf_len,
            [in, size=msg_controllen] const void* msg_control,
            size_t msg_controllen,
            int flags
        ) propagate_errno;

        int64_t ocall_recvmsg(
            int sockfd,
            [out, size=msg_namelen] void *msg_name,
            socklen_t msg_namelen,
            [out] socklen_t* msg_namelen_recv,
            [out, size=buf_len] void* buf,
            size_t buf_len,
            [out, size=msg_controllen] void *msg_control,
            size_t msg_controllen,
            [out] size_t* msg_controllen_recv,
            [out] int* msg_flags_recv,
            int flags
        ) propagate_errno;
    };
};
